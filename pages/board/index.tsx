import React, { useState, useEffect, FormEvent } from 'react'
import type { GetServerSideProps, NextPage } from 'next'
import { getSession } from "next-auth/react"
import Head from 'next/head'
import { Header } from '../components/Header'
import { SupportButton } from '../components/SupportButton'
import { FiCalendar, FiClock, FiEdit2, FiPlus, FiTrash, FiX } from 'react-icons/fi'
import { format } from 'date-fns'
import styles from './styles.module.scss'

import { firestore } from '../services/firebaseConnection' //instancia de conexão com o banco
import { setDoc } from 'firebase/firestore'
import { collection, query, orderBy, updateDoc, deleteDoc, getDocs, getDoc, doc, QueryDocumentSnapshot,DocumentData } from "@firebase/firestore"

type TaskList = {
    created: string | Date;
    dateFormated?: string;
    tarefa: string;
    user: string;
    done: boolean;
}

interface BoardProps {
    user: {
        name: string;
        email: string;
    }
}

export default function Board({ user }: BoardProps) {

    const [input, setInput] = useState<string>('');
    const [listTask, setListTask] = useState<QueryDocumentSnapshot<DocumentData>[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [taskEdit, setTaskEdit] = useState<boolean>(false);
    const [number, setNumber] = useState<string>('');

    // Pega a collection(tabela) do banco de dados atravez da instacia de conexão com o banco
    const listCollection = collection(firestore, 'tarefas');

    //listando as tarefas
    const getListTask = async () => {
        // constroe a consulta da collection
        const listQuery = query(listCollection, orderBy('created','desc'));
        // pega todos os documentos
        const queryGetDoc = await getDocs(listQuery);
        // adiciona a lista a um array (result)
        const result: QueryDocumentSnapshot<DocumentData>[] = [];
        queryGetDoc.forEach((doc) => {
            result.push(doc);
        });
        
        setListTask(result); // retorna o estado da consulta
    };

    // adcionado uma tarefa
    async function handleAddTask(event: FormEvent) {
        event.preventDefault();

        if (input === '') {
            alert('Preencha uma tarefa');
            return;
        }

        if(taskEdit)
        {
            handleTaskUpdate(number);
            setInput('');
            setTaskEdit(false);
            getListTask();

            return;
        }

        try {

            const timestamp: string = Date.now().toString();
            const _document = doc(firestore, `tarefas/${timestamp}`);

            let data = {
                created: new Date(),
                dateFormated: format(new Date(), 'dd MMMM yyyy'),
                tarefa: input,
                user: user.name,
                done: false
            };

            //add the Document
            await setDoc(_document, data);
            console.log("cadastrado com sucesso!");

            getListTask(); // função retorna a consulta ao banco

            setInput(''); // limpa o campo input
            setTaskEdit(false);

        } catch (error) {
            console.log("Erro ao cadastrar: ", error);
        }
    }

    // editar tarefas
    async function handleTaskEdit (id: string){

        const docRef = doc(firestore, "tarefas", id);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            setNumber(docSnap.id);
            setInput(docSnap.data().tarefa);
            setTaskEdit(true);
            
        }

        return;
    }

    // update tarefas
    async function handleTaskUpdate (id: string){

        try {
            const docRef = doc(firestore, 'tarefas', id);
            await updateDoc(docRef, { "tarefa": input });
            getListTask();
            setInput('');
        } catch( err ){
            console.log('Erro ao atualizar: ' + err);
        }
    }

    const closeTaskEdit = () => {
        setTaskEdit(false);
        setInput('');
    }

    //excluir uma tarefa
    async function deleteTask(id: string) {
        try{
            const docRef = doc(firestore, 'tarefas', id);
            await deleteDoc(docRef);
            getListTask();
        }catch(err){
            console.log('Erro ao deletar' + err)
        }
    }

    useEffect(() => {
        getListTask();
        setLoading(false);
    }, []);

    return (
        <div>
            <Head>
                <title>Board - Organizando suas tarefas.</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <Header />

            <main className={styles.container}>


                { taskEdit && (
                    <span className={styles.warnText}>
                        <button onClick={() => closeTaskEdit() }><FiX size={20} color="#F00" /></button>
                        Atualizar tarefas.
                    </span>
                )}

                <form onSubmit={handleAddTask}>
                    <input
                        type='text'
                        placeholder='Digite sua tarefa...'
                        value={input}
                        onChange={(e) => setInput(e.target.value)} />

                    <button type='submit'>
                        <FiPlus size={25} color='#17181f' />
                    </button>
                </form>

                <h1>Você tem {listTask.length} tarefa(s)!</h1>
                <section>
                    {
                    // verifico o carregamento da apgina
                    loading ? (<h3>Aguarde carregando...</h3>) : 
                    //lista os documentos
                    listTask.map((item, index) => {
                        return (
                            <article key={index} className={styles.taskList}>
                                <p><a href={`/board/${item.id}`}>{item.data().tarefa}</a></p>
                                <div className={styles.actions}>
                                    <div>
                                        <div>
                                            <FiCalendar size={20} color='#FFB800' />
                                            <time>{item.data().dateFormated}</time>
                                        </div>
                                        <button onClick={ () => handleTaskEdit(item.id) }>
                                            <FiEdit2 size={20} color='#FFF' />
                                            <span>Editar</span>
                                        </button>
                                    </div>
                                    <button onClick={ () => deleteTask(item.id)}>
                                        <FiTrash size={20} color='#FF3636' />
                                        <span>Excluir</span>
                                    </button>
                                </div>
                            </article>
                        )
                    })}
                </section>
            </main>

            <div className={styles.vipContainer}>
                <h3>Obrigado por apoiar esse projeto.</h3>
                <div>
                    <FiClock size={28} color='#FFF' />
                    <time>última doação foi a 3 dias.</time>
                </div>
            </div>

            <SupportButton />

        </div>
    )
}

export const getServerSideProps: GetServerSideProps = async ({ req }) => {

    const session = await getSession({ req });

    if (!session?.user?.email) {
        return {
            redirect: {
                destination: '/',
                permanent: false
            }
        }
    }

    const user = {
        name: session?.user?.name,
        email: session?.user.email
    }

    return {
        props: {
            user
        }
    }
}
